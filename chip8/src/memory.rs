use std::fmt::{Display, Formatter, Error};

pub const MEM_SIZE: usize = 4096;
pub const PROGRAM_LOAD_OFFSET: usize = 0x200;
const SPRITES: [[u8; 5]; 16] = [
    [0xF0, 0x90, 0x90, 0x90, 0xF0], //0
    [0x20, 0x60, 0x20, 0x20, 0x70], //1
    [0xF0, 0x10, 0xF0, 0x80, 0xF0], //2
    [0xF0, 0x10, 0xF0, 0x10, 0xF0], //3
    [0x90, 0x90, 0xF0, 0x10, 0x10], //4
    [0xF0, 0x80, 0xF0, 0x10, 0xF0], //5
    [0xF0, 0x80, 0xF0, 0x90, 0xF0], //6
    [0xF0, 0x10, 0x20, 0x40, 0x40], //7
    [0xF0, 0x90, 0xF0, 0x90, 0xF0], //8
    [0xF0, 0x90, 0xF0, 0x10, 0xF0], //9
    [0xF0, 0x90, 0xF0, 0x90, 0x90], //A
    [0xE0, 0x90, 0xE0, 0x90, 0xE0], //B
    [0xF0, 0x80, 0x80, 0x80, 0xF0], //C
    [0xE0, 0x90, 0x90, 0x90, 0xE0], //D
    [0xF0, 0x80, 0xF0, 0x80, 0xF0], //E
    [0xF0, 0x80, 0xF0, 0x80, 0x80], //F
];

pub struct Memory {
    pub memory: [u8; MEM_SIZE]
}

impl Memory {
    pub fn new() -> Memory {
        Memory {
            memory: [0; MEM_SIZE]
        }
    }

    pub fn reset(&mut self) {
        self.memory = [0; MEM_SIZE];
    }

    pub fn load_program(&mut self, vec: &Vec<u8>) {
        for (i, &bt) in vec.iter().enumerate() {
            self.memory[i + PROGRAM_LOAD_OFFSET] = bt;
        }
    }
}

impl Display for Memory {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {
        for (i, value) in self.memory.iter().enumerate() {
            write!(f, "0x{:X} ", value)?;
            if (i + 1) % 15 == 0 {
                write!(f, "\n")?;
            }
        }
        Ok(())
    }
}
